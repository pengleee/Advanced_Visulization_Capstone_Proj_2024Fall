# -*- coding: utf-8 -*-
"""[Peng Li] Advanced Visualization Capstone

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/120TijvW2SGpB88Nl9iIbyF9scveg9XIf

# Assignment Overview

In this assignment, we look at prescriptive analytics to help us make a decision in constructing a portfolio of stocks. To recap the earlier the steps, * We first used descriptive analytics to understand what happened historically in the markets.
* Next, we looked at historical relationships and drivers of the underlying stocks in the market to see whether or not certain features or structures could be revealed using diagnostic analytics
* In the last assignment, we employed ensemble methods to build predictors of future returns

The final prescriptive step is to create an investment recommendation of stocks and the respective amounts to invest in each stock in order to create a portfolio with the:

*   Highest expected return
*   Lowest expected volatility



The ideal way to do this would be to connect the output of the last module and utilize the predicted forward returns and also a forward-looking covariance matrix of all the stocks. (An alternative we could use here would be to plug in the time series forecasts generated by the Prophet package.)

For this assignment, we will take a much simpler path and simply run a portfolio simulation using the historical expected returns and covariance as if they were the forecasted values.

(If you would like to use the outputs from any of the prediction methods, you may do that if you choose. You will need the forecast mean returns and the forecast covariance matrix of the stock returns.)

Using the mean and covariance, you will find the optimal portfolio weights using two different portfolio metrics:

* Sharpe Ratio (Portfolio Return / Portfolio Standard Deviation)
* Minimum Variance Portfolio (or the portfolio with the least risk)

using a simple Monte Carlo simulation of your selected portfolio. All this means is that we will create hypothetical portfolios and select the ones with the optimal characteristics.


The objective of this assignment is to:
* utilize visualization methods for prescriptive analytics
* annotate standard charts
* experiment with simulations in prescriptive analytics
"""

import pandas as pd
import numpy as np

import plotly.io as pio
pio.templates.default = "plotly_white"

import plotly.express as px
import plotly.graph_objects as go


import pandas_datareader.data as web

"""## **Homework question 1**


**Choose 4 ticker symbols to create a portfolio**

The selection of the tickers is up to you and should be determined entirely from the visual analyses of the last assignments.

In the ideal case, these 4 tickers have the following properties:
* They have the highest forecasted future returns.
* They have near 0 correlation to one another.

The forecasted returns would ideally have been computed from the last assignment. An alternative would be to rank the forecast returns from the time series prediction using FB's Prophet library. (This is entirely optional.)

The forward-looking covariance estimation is beyond the scope of this class but as a simple programmatic solution. You could compute the covariances for the highest stocks and select the group which has median or mean closest to 0. A domain-based, visual approach would to look at the previous graphs of the covariance of the various sectors and try to choose the 4 stock tickers from the least correlated sectors.

In any case, select any 4 stocks of yor choosing and assign them in the code below.

### Question 1 answer here
"""

stock = ['MMM', 'TGT', 'ABT', 'AAPL']
# 3M, Target Corporation, Abbott, Apple

"""## **Homework question 2**
**In a few sentences, give your justification for using those 4 tickers here based on the analytics from the previous module and include any supporting visualizations (inserting the image directly is suggested)**

### Question 2 answer here

Your answer here

---


Run the following code to pull data for your ticker symbols.
The code:
1. fetches the data
2. computes the simple returns
3. computes the covariance matrix
4. runs a number of simulations of portfolios with random weights
5. stores the simulation results
"""

import pandas
import numpy as np
from pandas_datareader import data
from datetime import datetime
from pandas_datareader import data as pdr
import yfinance as yfin
yfin.pdr_override()

from datetime import datetime
data =pdr.get_data_yahoo(stock,start='2010-1-1',end=datetime.today().strftime('%Y-%m-%d'))['Adj Close']
print(data.round(2))

"""Now we perform some simple calculations using the pandas data manipulation functions."""

stock_ret = data.pct_change()
print(stock_ret.round(4)*100)

#Calculate mean returns and covariances of all of the stocks
mean_returns = stock_ret.mean()
cov_matrix = stock_ret.cov()
print(mean_returns)
print(cov_matrix)

"""Here we define the simulation parameters."""

#Set the number of iterations to 10000 and define an array to hold the simulation results; initially set to all zeros
num_iterations = 10000
simulation_res = np.zeros((3+len(stock),num_iterations))

"""You will notice that we allocated an empty matrix to hold all of our results. There are many cleaner ways to do this using only pandas objects but this is a numerical approach."""

simulation_res.shape

for i in range(num_iterations):
  #Select random weights and normalize to set the sum to 1
  weights = np.array(np.random.random(len(stock)))
  weights /= np.sum(weights)
  #Calculate the return and standard deviation for every step
  portfolio_return = np.sum(mean_returns * weights)
  portfolio_std_dev = np.sqrt(np.dot(weights.T,np.dot(cov_matrix, weights)))
  #Store all the results
  simulation_res[0,i] = portfolio_return
  simulation_res[1,i] = portfolio_std_dev
  #Calculate Sharpe ratio and store it in the array
  simulation_res[2,i] = simulation_res[0,i] / simulation_res[1,i]
  #Save the weights in the array
  for j in range(len(weights)):
    simulation_res[j+3,i] = weights[j]

sim_frame = pd.DataFrame(simulation_res.T,columns=['ret','stdev','sharpe',*stock])
sim_frame

"""Now we can locate the ideal portfolios from the simulation."""

max_sharpe = sim_frame.iloc[sim_frame['sharpe'].idxmax()]

#Spot the position of the portfolio with minimum Standard Deviation
min_std = sim_frame.iloc[sim_frame['stdev'].idxmin()]
print("The portfolio for max Sharpe Ratio:\n",max_sharpe)
print("\nThe portfolio for min risk:\n",min_std)

max_sharpe.stdev

"""## **Homework question 3** Optional

* **Create a scatter plot of all of the portfolios. On the x-axis will be the standard deviation of the portfolio (the stdev column of the dataframe `simframe`). On the y-axis, place the portfolio return (the ret column of `simframe`)**.
* **annotate the graph such that the portfolios corresponding the the minimum standard deviation and the max Sharpe Ratio portfolios are highlighted or labelled.**

#### Question 3 answer here
"""

# your code here
import plotly.express as px
fig = px.scatter(sim_frame, x = 'stdev', y='ret', color = 'sharpe')


fig.add_annotation(
            x=max_sharpe.stdev,
            y=max_sharpe.ret,
            text="max Sharpe Ratio")
fig.add_annotation(
            x=min_std.stdev,
            y=min_std.ret,
            text="min standard deviation")
fig.update_annotations(dict(
            xref="x",
            yref="y",
            showarrow=True,
            arrowhead=7,
            ax=0,
            ay=-40
))
fig.show()

"""## Homework question 4

Let's see how an investment in either of the two portfolios would have fared in the last 2 years.

**Create 2 time series visualizations showing the cumulative returns of the portfolios compared to one another.**

### Question 4 answer here
"""

# Your code for the cumulative returns and respective visualization here
from dateutil.relativedelta import relativedelta


todays_date = datetime.today().strftime('%Y-%m-%d')
two_years_ago_date = (datetime.today() - relativedelta(years=2)).strftime('%Y-%m-%d')
price_data = data.loc[two_years_ago_date:todays_date]
ret_data = price_data.pct_change()[1:]

# Asset weights for max sharpe ratio portfolio
sr_wts = [max_sharpe[x] for x in stock]
sr_weighted_returns = (sr_wts * ret_data)
sr_port_ret = sr_weighted_returns.sum(axis=1)
sr_cumulative_ret = (sr_port_ret + 1).cumprod()

# Asset weights for max sharpe ratio portfolio
mr_wts = [min_std[x] for x in stock]
mr_weighted_returns = (mr_wts * ret_data)
mr_port_ret = mr_weighted_returns.sum(axis=1)
mr_cumulative_ret = (mr_port_ret + 1).cumprod()

# Create the cumulative return plots
fig = go.Figure()
fig.add_trace(go.Scatter(x=sr_cumulative_ret.index, y=sr_cumulative_ret,
                    mode='lines',
                    name="Sharpe Ratio Cumulative Return"))
fig.add_trace(go.Scatter(x=mr_cumulative_ret.index, y=mr_cumulative_ret,
                    mode='lines',
                    name="Min. Risk Cumulative Return"))

# Set title
fig.update_layout(
    title_text="Cumulative Returns"
)

# Add range slider
fig.update_layout(
    xaxis=dict(
        rangeselector=dict(
            buttons=list([
                dict(count=1,
                     label="1m",
                     step="month",
                     stepmode="backward"),
                dict(count=6,
                     label="6m",
                     step="month",
                     stepmode="backward"),
                dict(count=1,
                     label="YTD",
                     step="year",
                     stepmode="todate"),
                dict(count=1,
                     label="1y",
                     step="year",
                     stepmode="backward"),
                dict(step="all")
            ])
        ),
        rangeslider=dict(
            visible=True
        ),
        type="date"
    )
)


fig.show()